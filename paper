#!/usr/bin/env php
<?php

use Paphper\Config;
use Paphper\FileContentResolver;
use Paphper\FileTypeResolvers\HtmlResolver;
use Paphper\FileTypeResolvers\MdResolver;
use Paphper\PageResolvers\FilesystemPageResolver;
use React\EventLoop\Factory;
use React\Filesystem\Filesystem;
use Symfony\Component\Console\Application;
use Paphper\Commands\Watch;
use Paphper\Commands\Build;

require_once 'vendor/autoload.php';

$loop = Factory::create();
$filesystem = Filesystem::create($loop);


$configData = include getBaseDir() . '/config.php';
$config = new Config($configData);


//resolve the class that creates content from the file
$fileContentResolver = new FileContentResolver();

//this class resolves the class that can generate content
//based on the content in the file with extension .html
$htmlResolver = new HtmlResolver($config, $filesystem);
$fileContentResolver->add('.html', $htmlResolver);

//this class resolves the class that can generate content
//based on the content in the file with extension .md
$mdResolver = new MdResolver($config, $filesystem);
$fileContentResolver->add('.md', $mdResolver);

//this class resolves the class that can generate content
//based on the content in the file with extension .blade.php
$bladeResolver = new \Paphper\FileTypeResolvers\BladeResolver($config, $filesystem);
$fileContentResolver->add('.blade.php', $bladeResolver);

$pageResolvers = new FilesystemPageResolver($config, $filesystem);

$configData = include getBaseDir() . '/config.php';
$devConfig  = array_merge($configData, ['is_dev' => true]);

$manager = new \Intervention\Image\ImageManager(array('driver' => 'gd'));

$app = new Application();

$app->add(new Watch(new Config($devConfig), $pageResolvers, $fileContentResolver, $filesystem, $loop, $manager));
$app->add(new Build(new Config($configData), $pageResolvers, $fileContentResolver, $filesystem, $loop, $manager));
$app->add(new \Paphper\Commands\Resize($loop, $filesystem, new Config($configData), $manager));

$app->run();
